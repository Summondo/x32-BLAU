;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit InstDec : 
  module InstDec : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Instruction : UInt<32>, opcode : UInt<6>, immidiate : SInt<32>, aA : UInt<5>, bA : UInt<5>, dA : UInt<5>, offset : SInt<8>}
    
    node _T = bits(io.Instruction, 5, 0) @[InstructionDecoder.scala 15:34]
    io.opcode <= _T @[InstructionDecoder.scala 15:17]
    io.immidiate <= asSInt(UInt<32>("h00")) @[InstructionDecoder.scala 16:17]
    io.aA <= UInt<5>("h00") @[InstructionDecoder.scala 17:17]
    io.bA <= UInt<5>("h00") @[InstructionDecoder.scala 18:17]
    io.dA <= UInt<5>("h00") @[InstructionDecoder.scala 19:17]
    io.offset <= asSInt(UInt<8>("h00")) @[InstructionDecoder.scala 20:17]
    node _T_1 = bits(io.opcode, 5, 4) @[InstructionDecoder.scala 22:21]
    node _T_2 = eq(UInt<1>("h00"), _T_1) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      node _T_3 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 25:46]
      io.aA <= _T_3 @[InstructionDecoder.scala 25:29]
      node _T_4 = bits(io.Instruction, 15, 11) @[InstructionDecoder.scala 26:46]
      io.dA <= _T_4 @[InstructionDecoder.scala 26:29]
      node _T_5 = bits(io.Instruction, 20, 16) @[InstructionDecoder.scala 27:46]
      io.bA <= _T_5 @[InstructionDecoder.scala 27:29]
      node _T_6 = bits(io.opcode, 3, 2) @[InstructionDecoder.scala 28:28]
      node _T_7 = eq(_T_6, UInt<2>("h03")) @[InstructionDecoder.scala 28:34]
      when _T_7 : @[InstructionDecoder.scala 28:42]
        node _T_8 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 29:46]
        node _T_9 = asSInt(_T_8) @[InstructionDecoder.scala 29:60]
        io.offset <= _T_9 @[InstructionDecoder.scala 29:29]
        io.dA <= UInt<5>("h00") @[InstructionDecoder.scala 30:29]
        skip @[InstructionDecoder.scala 28:42]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_10 = eq(UInt<1>("h01"), _T_1) @[Conditional.scala 37:30]
      when _T_10 : @[Conditional.scala 39:67]
        node _T_11 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 36:46]
        io.aA <= _T_11 @[InstructionDecoder.scala 36:29]
        node _T_12 = bits(io.opcode, 3, 2) @[InstructionDecoder.scala 38:27]
        node _T_13 = eq(_T_12, UInt<2>("h03")) @[InstructionDecoder.scala 38:33]
        when _T_13 : @[InstructionDecoder.scala 38:41]
          node _T_14 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 39:50]
          node _T_15 = asSInt(_T_14) @[InstructionDecoder.scala 39:64]
          io.offset <= _T_15 @[InstructionDecoder.scala 39:33]
          node _T_16 = bits(io.Instruction, 23, 11) @[InstructionDecoder.scala 40:50]
          node _T_17 = asSInt(_T_16) @[InstructionDecoder.scala 40:64]
          io.immidiate <= _T_17 @[InstructionDecoder.scala 40:33]
          io.dA <= UInt<5>("h00") @[InstructionDecoder.scala 41:33]
          skip @[InstructionDecoder.scala 38:41]
        else : @[InstructionDecoder.scala 42:25]
          node _T_18 = bits(io.Instruction, 31, 16) @[InstructionDecoder.scala 43:50]
          node _T_19 = asSInt(_T_18) @[InstructionDecoder.scala 43:64]
          io.immidiate <= _T_19 @[InstructionDecoder.scala 43:33]
          node _T_20 = bits(io.Instruction, 15, 11) @[InstructionDecoder.scala 44:50]
          io.dA <= _T_20 @[InstructionDecoder.scala 44:33]
          skip @[InstructionDecoder.scala 42:25]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_21 = eq(UInt<2>("h02"), _T_1) @[Conditional.scala 37:30]
        when _T_21 : @[Conditional.scala 39:67]
          node _T_22 = bits(io.opcode, 3, 3) @[InstructionDecoder.scala 50:27]
          node _T_23 = eq(_T_22, UInt<1>("h00")) @[InstructionDecoder.scala 50:31]
          when _T_23 : @[InstructionDecoder.scala 50:39]
            node _T_24 = bits(io.opcode, 2, 2) @[InstructionDecoder.scala 52:31]
            node _T_25 = eq(_T_24, UInt<1>("h00")) @[InstructionDecoder.scala 52:35]
            when _T_25 : @[InstructionDecoder.scala 52:43]
              node _T_26 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 54:54]
              io.aA <= _T_26 @[InstructionDecoder.scala 54:37]
              node _T_27 = bits(io.Instruction, 15, 11) @[InstructionDecoder.scala 55:54]
              io.dA <= _T_27 @[InstructionDecoder.scala 55:37]
              node _T_28 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 56:54]
              node _T_29 = asSInt(_T_28) @[InstructionDecoder.scala 56:68]
              io.offset <= _T_29 @[InstructionDecoder.scala 56:37]
              skip @[InstructionDecoder.scala 52:43]
            skip @[InstructionDecoder.scala 50:39]
          else : @[InstructionDecoder.scala 58:25]
            node _T_30 = bits(io.opcode, 2, 2) @[InstructionDecoder.scala 60:31]
            node _T_31 = eq(_T_30, UInt<1>("h00")) @[InstructionDecoder.scala 60:35]
            when _T_31 : @[InstructionDecoder.scala 60:43]
              node _T_32 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 62:54]
              io.aA <= _T_32 @[InstructionDecoder.scala 62:37]
              node _T_33 = bits(io.Instruction, 20, 16) @[InstructionDecoder.scala 63:54]
              io.bA <= _T_33 @[InstructionDecoder.scala 63:37]
              node _T_34 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 64:54]
              node _T_35 = asSInt(_T_34) @[InstructionDecoder.scala 64:68]
              io.offset <= _T_35 @[InstructionDecoder.scala 64:37]
              skip @[InstructionDecoder.scala 60:43]
            else : @[InstructionDecoder.scala 65:29]
              node _T_36 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 67:54]
              io.aA <= _T_36 @[InstructionDecoder.scala 67:37]
              node _T_37 = bits(io.Instruction, 23, 11) @[InstructionDecoder.scala 68:54]
              node _T_38 = asSInt(_T_37) @[InstructionDecoder.scala 68:68]
              io.immidiate <= _T_38 @[InstructionDecoder.scala 68:37]
              node _T_39 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 69:54]
              node _T_40 = asSInt(_T_39) @[InstructionDecoder.scala 69:68]
              io.offset <= _T_40 @[InstructionDecoder.scala 69:37]
              skip @[InstructionDecoder.scala 65:29]
            skip @[InstructionDecoder.scala 58:25]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_41 = eq(UInt<2>("h03"), _T_1) @[Conditional.scala 37:30]
          when _T_41 : @[Conditional.scala 39:67]
            node _T_42 = bits(io.opcode, 3, 3) @[InstructionDecoder.scala 77:27]
            node _T_43 = eq(_T_42, UInt<1>("h00")) @[InstructionDecoder.scala 77:31]
            when _T_43 : @[InstructionDecoder.scala 77:39]
              node _T_44 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 78:50]
              node _T_45 = asSInt(_T_44) @[InstructionDecoder.scala 78:64]
              io.offset <= _T_45 @[InstructionDecoder.scala 78:33]
              node _T_46 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 79:50]
              io.aA <= _T_46 @[InstructionDecoder.scala 79:33]
              skip @[InstructionDecoder.scala 77:39]
            else : @[InstructionDecoder.scala 81:23]
              node _T_47 = bits(io.Instruction, 31, 6) @[InstructionDecoder.scala 82:47]
              node _T_48 = asSInt(_T_47) @[InstructionDecoder.scala 82:54]
              io.immidiate <= _T_48 @[InstructionDecoder.scala 82:30]
              skip @[InstructionDecoder.scala 81:23]
            skip @[Conditional.scala 39:67]
    
