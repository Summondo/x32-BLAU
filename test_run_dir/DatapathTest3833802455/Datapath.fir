;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Datapath : 
  module Memory : 
    input clock : Clock
    input reset : Reset
    output io : {flip rddA : UInt<8>, flip wrdA : UInt<8>, flip wrdData : SInt<32>, rddData : SInt<32>, flip wrd : UInt<1>, flip testSel : UInt<3>, flip rdiA : UInt<8>, rdiData : UInt<32>}
    
    smem dataMem : SInt<32>[256], undefined @[Memory.scala 16:30]
    wire instMem : UInt<32>[100] @[Memory.scala 17:23]
    instMem[0] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[1] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[2] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[3] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[4] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[5] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[6] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[7] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[8] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[9] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[10] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[11] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[12] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[13] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[14] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[15] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[16] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[17] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[18] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[19] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[20] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[21] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[22] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[23] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[24] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[25] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[26] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[27] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[28] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[29] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[30] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[31] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[32] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[33] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[34] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[35] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[36] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[37] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[38] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[39] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[40] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[41] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[42] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[43] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[44] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[45] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[46] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[47] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[48] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[49] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[50] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[51] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[52] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[53] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[54] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[55] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[56] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[57] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[58] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[59] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[60] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[61] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[62] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[63] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[64] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[65] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[66] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[67] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[68] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[69] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[70] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[71] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[72] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[73] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[74] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[75] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[76] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[77] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[78] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[79] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[80] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[81] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[82] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[83] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[84] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[85] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[86] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[87] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[88] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[89] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[90] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[91] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[92] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[93] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[94] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[95] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[96] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[97] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[98] <= UInt<32>("h00") @[Memory.scala 19:20]
    instMem[99] <= UInt<32>("h00") @[Memory.scala 19:20]
    read mport MPORT = dataMem[io.rddA], clock @[Memory.scala 23:31]
    io.rddData <= MPORT @[Memory.scala 23:16]
    node _T = bits(io.rdiA, 6, 0)
    io.rdiData <= instMem[_T] @[Memory.scala 24:16]
    node _T_1 = eq(io.wrd, UInt<1>("h01")) @[Memory.scala 26:17]
    when _T_1 : @[Memory.scala 26:28]
      write mport MPORT_1 = dataMem[io.wrdA], clock
      MPORT_1 <= io.wrdData
      skip @[Memory.scala 26:28]
    node _T_2 = eq(UInt<1>("h00"), io.testSel) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      instMem[0] <= UInt<22>("h02041d0") @[Memory.scala 32:29]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<1>("h01"), io.testSel) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        instMem[0] <= UInt<22>("h02041d0") @[Memory.scala 35:29]
        instMem[1] <= UInt<20>("h083811") @[Memory.scala 36:29]
        instMem[2] <= UInt<22>("h02ab810") @[Memory.scala 37:29]
        instMem[3] <= UInt<20>("h0fb010") @[Memory.scala 38:29]
        instMem[4] <= UInt<22>("h02031c2") @[Memory.scala 39:29]
        instMem[5] <= UInt<22>("h0375204") @[Memory.scala 40:29]
        instMem[6] <= UInt<22>("h037d205") @[Memory.scala 41:29]
        instMem[7] <= UInt<22>("h0377206") @[Memory.scala 42:29]
        instMem[8] <= UInt<22>("h027fa07") @[Memory.scala 43:29]
        instMem[9] <= UInt<22>("h0360dc8") @[Memory.scala 44:29]
        instMem[10] <= UInt<19>("h07f21a") @[Memory.scala 45:29]
        instMem[11] <= UInt<19>("h07f21b") @[Memory.scala 46:29]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<2>("h02"), io.testSel) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          instMem[0] <= UInt<22>("h02041d0") @[Memory.scala 49:29]
          instMem[1] <= UInt<20>("h083811") @[Memory.scala 50:29]
          instMem[2] <= UInt<22>("h02031c2") @[Memory.scala 51:29]
          instMem[3] <= UInt<22>("h0265204") @[Memory.scala 52:29]
          instMem[4] <= UInt<22>("h0265204") @[Memory.scala 53:29]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_5 = eq(UInt<2>("h03"), io.testSel) @[Conditional.scala 37:30]
          when _T_5 : @[Conditional.scala 39:67]
            instMem[0] <= UInt<9>("h01f8") @[Memory.scala 56:29]
            instMem[7] <= UInt<19>("h074010") @[Memory.scala 57:29]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_6 = eq(UInt<3>("h04"), io.testSel) @[Conditional.scala 37:30]
            when _T_6 : @[Conditional.scala 39:67]
              instMem[0] <= UInt<9>("h0138") @[Memory.scala 60:29]
              instMem[1] <= UInt<17>("h014010") @[Memory.scala 61:29]
              instMem[2] <= UInt<18>("h024010") @[Memory.scala 62:29]
              instMem[3] <= UInt<18>("h034010") @[Memory.scala 63:29]
              instMem[4] <= UInt<19>("h044010") @[Memory.scala 64:29]
              instMem[5] <= UInt<19>("h054010") @[Memory.scala 65:29]
              instMem[6] <= UInt<19>("h064010") @[Memory.scala 66:29]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_7 = eq(UInt<3>("h05"), io.testSel) @[Conditional.scala 37:30]
              when _T_7 : @[Conditional.scala 39:67]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_8 = eq(UInt<3>("h06"), io.testSel) @[Conditional.scala 37:30]
                when _T_8 : @[Conditional.scala 39:67]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_9 = eq(UInt<3>("h07"), io.testSel) @[Conditional.scala 37:30]
                  when _T_9 : @[Conditional.scala 39:67]
                    skip @[Conditional.scala 39:67]
    
  module Register32 : 
    input clock : Clock
    input reset : Reset
    output io : {flip DataIn : SInt<32>, flip DA : UInt<5>, flip AA : UInt<5>, flip BA : UInt<5>, AOut : SInt<32>, BOut : SInt<32>}
    
    wire _WIRE : SInt<32>[32] @[Register32.scala 13:36]
    _WIRE[0] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[1] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[2] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[3] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[4] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[5] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[6] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[7] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[8] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[9] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[10] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[11] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[12] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[13] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[14] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[15] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[16] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[17] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[18] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[19] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[20] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[21] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[22] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[23] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[24] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[25] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[26] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[27] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[28] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[29] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[30] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    _WIRE[31] <= asSInt(UInt<32>("h00")) @[Register32.scala 13:36]
    reg Registers : SInt<32>[32], clock with : (reset => (reset, _WIRE)) @[Register32.scala 13:28]
    Registers[io.DA] <= io.DataIn @[Register32.scala 15:22]
    io.AOut <= Registers[io.AA] @[Register32.scala 16:13]
    io.BOut <= Registers[io.BA] @[Register32.scala 17:13]
    
  module InstDec : 
    input clock : Clock
    input reset : Reset
    output io : {flip Instruction : UInt<32>, opcode : UInt<6>, immidiate : SInt<32>, aA : UInt<5>, bA : UInt<5>, dA : UInt<5>, offset : SInt<8>}
    
    node _T = bits(io.Instruction, 5, 0) @[InstructionDecoder.scala 15:34]
    io.opcode <= _T @[InstructionDecoder.scala 15:17]
    io.immidiate <= asSInt(UInt<32>("h00")) @[InstructionDecoder.scala 16:17]
    io.aA <= UInt<5>("h00") @[InstructionDecoder.scala 17:17]
    io.bA <= UInt<5>("h00") @[InstructionDecoder.scala 18:17]
    io.dA <= UInt<5>("h00") @[InstructionDecoder.scala 19:17]
    io.offset <= asSInt(UInt<8>("h00")) @[InstructionDecoder.scala 20:17]
    node _T_1 = bits(io.opcode, 5, 4) @[InstructionDecoder.scala 22:21]
    node _T_2 = eq(UInt<1>("h00"), _T_1) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      node _T_3 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 25:46]
      io.aA <= _T_3 @[InstructionDecoder.scala 25:29]
      node _T_4 = bits(io.Instruction, 15, 11) @[InstructionDecoder.scala 26:46]
      io.dA <= _T_4 @[InstructionDecoder.scala 26:29]
      node _T_5 = bits(io.Instruction, 20, 16) @[InstructionDecoder.scala 27:46]
      io.bA <= _T_5 @[InstructionDecoder.scala 27:29]
      node _T_6 = bits(io.opcode, 3, 2) @[InstructionDecoder.scala 28:28]
      node _T_7 = eq(_T_6, UInt<2>("h03")) @[InstructionDecoder.scala 28:34]
      when _T_7 : @[InstructionDecoder.scala 28:42]
        node _T_8 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 29:46]
        node _T_9 = asSInt(_T_8) @[InstructionDecoder.scala 29:60]
        io.offset <= _T_9 @[InstructionDecoder.scala 29:29]
        io.dA <= UInt<5>("h00") @[InstructionDecoder.scala 30:29]
        skip @[InstructionDecoder.scala 28:42]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_10 = eq(UInt<1>("h01"), _T_1) @[Conditional.scala 37:30]
      when _T_10 : @[Conditional.scala 39:67]
        node _T_11 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 36:46]
        io.aA <= _T_11 @[InstructionDecoder.scala 36:29]
        node _T_12 = bits(io.opcode, 3, 2) @[InstructionDecoder.scala 38:27]
        node _T_13 = eq(_T_12, UInt<2>("h03")) @[InstructionDecoder.scala 38:33]
        when _T_13 : @[InstructionDecoder.scala 38:41]
          node _T_14 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 39:50]
          node _T_15 = asSInt(_T_14) @[InstructionDecoder.scala 39:64]
          io.offset <= _T_15 @[InstructionDecoder.scala 39:33]
          node _T_16 = bits(io.Instruction, 23, 11) @[InstructionDecoder.scala 40:50]
          node _T_17 = asSInt(_T_16) @[InstructionDecoder.scala 40:64]
          io.immidiate <= _T_17 @[InstructionDecoder.scala 40:33]
          io.dA <= UInt<5>("h00") @[InstructionDecoder.scala 41:33]
          skip @[InstructionDecoder.scala 38:41]
        else : @[InstructionDecoder.scala 42:25]
          node _T_18 = bits(io.Instruction, 31, 16) @[InstructionDecoder.scala 43:50]
          node _T_19 = asSInt(_T_18) @[InstructionDecoder.scala 43:64]
          io.immidiate <= _T_19 @[InstructionDecoder.scala 43:33]
          node _T_20 = bits(io.Instruction, 15, 11) @[InstructionDecoder.scala 44:50]
          io.dA <= _T_20 @[InstructionDecoder.scala 44:33]
          skip @[InstructionDecoder.scala 42:25]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_21 = eq(UInt<2>("h02"), _T_1) @[Conditional.scala 37:30]
        when _T_21 : @[Conditional.scala 39:67]
          node _T_22 = bits(io.opcode, 3, 3) @[InstructionDecoder.scala 50:27]
          node _T_23 = eq(_T_22, UInt<1>("h00")) @[InstructionDecoder.scala 50:31]
          when _T_23 : @[InstructionDecoder.scala 50:39]
            node _T_24 = bits(io.opcode, 2, 2) @[InstructionDecoder.scala 52:31]
            node _T_25 = eq(_T_24, UInt<1>("h00")) @[InstructionDecoder.scala 52:35]
            when _T_25 : @[InstructionDecoder.scala 52:43]
              node _T_26 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 54:54]
              io.aA <= _T_26 @[InstructionDecoder.scala 54:37]
              node _T_27 = bits(io.Instruction, 15, 11) @[InstructionDecoder.scala 55:54]
              io.dA <= _T_27 @[InstructionDecoder.scala 55:37]
              node _T_28 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 56:54]
              node _T_29 = asSInt(_T_28) @[InstructionDecoder.scala 56:68]
              io.offset <= _T_29 @[InstructionDecoder.scala 56:37]
              skip @[InstructionDecoder.scala 52:43]
            skip @[InstructionDecoder.scala 50:39]
          else : @[InstructionDecoder.scala 58:25]
            node _T_30 = bits(io.opcode, 2, 2) @[InstructionDecoder.scala 60:31]
            node _T_31 = eq(_T_30, UInt<1>("h00")) @[InstructionDecoder.scala 60:35]
            when _T_31 : @[InstructionDecoder.scala 60:43]
              node _T_32 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 62:54]
              io.aA <= _T_32 @[InstructionDecoder.scala 62:37]
              node _T_33 = bits(io.Instruction, 20, 16) @[InstructionDecoder.scala 63:54]
              io.bA <= _T_33 @[InstructionDecoder.scala 63:37]
              node _T_34 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 64:54]
              node _T_35 = asSInt(_T_34) @[InstructionDecoder.scala 64:68]
              io.offset <= _T_35 @[InstructionDecoder.scala 64:37]
              skip @[InstructionDecoder.scala 60:43]
            else : @[InstructionDecoder.scala 65:29]
              node _T_36 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 67:54]
              io.aA <= _T_36 @[InstructionDecoder.scala 67:37]
              node _T_37 = bits(io.Instruction, 23, 11) @[InstructionDecoder.scala 68:54]
              node _T_38 = asSInt(_T_37) @[InstructionDecoder.scala 68:68]
              io.immidiate <= _T_38 @[InstructionDecoder.scala 68:37]
              node _T_39 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 69:54]
              node _T_40 = asSInt(_T_39) @[InstructionDecoder.scala 69:68]
              io.offset <= _T_40 @[InstructionDecoder.scala 69:37]
              skip @[InstructionDecoder.scala 65:29]
            skip @[InstructionDecoder.scala 58:25]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_41 = eq(UInt<2>("h03"), _T_1) @[Conditional.scala 37:30]
          when _T_41 : @[Conditional.scala 39:67]
            node _T_42 = bits(io.opcode, 3, 3) @[InstructionDecoder.scala 77:27]
            node _T_43 = eq(_T_42, UInt<1>("h00")) @[InstructionDecoder.scala 77:31]
            when _T_43 : @[InstructionDecoder.scala 77:39]
              node _T_44 = bits(io.Instruction, 31, 24) @[InstructionDecoder.scala 78:50]
              node _T_45 = asSInt(_T_44) @[InstructionDecoder.scala 78:64]
              io.offset <= _T_45 @[InstructionDecoder.scala 78:33]
              node _T_46 = bits(io.Instruction, 10, 6) @[InstructionDecoder.scala 79:50]
              io.aA <= _T_46 @[InstructionDecoder.scala 79:33]
              skip @[InstructionDecoder.scala 77:39]
            else : @[InstructionDecoder.scala 81:23]
              node _T_47 = bits(io.Instruction, 31, 6) @[InstructionDecoder.scala 82:47]
              node _T_48 = asSInt(_T_47) @[InstructionDecoder.scala 82:54]
              io.immidiate <= _T_48 @[InstructionDecoder.scala 82:30]
              skip @[InstructionDecoder.scala 81:23]
            skip @[Conditional.scala 39:67]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : SInt<32>, flip b : SInt<32>, flip fs : UInt<4>, y : SInt<32>, flag : UInt<1>}
    
    io.y <= asSInt(UInt<1>("h00")) @[ALU.scala 14:10]
    io.flag <= UInt<1>("h00") @[ALU.scala 15:13]
    node _T = eq(UInt<1>("h00"), io.fs) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = add(io.a, io.b) @[ALU.scala 18:31]
      node _T_2 = tail(_T_1, 1) @[ALU.scala 18:31]
      node _T_3 = asSInt(_T_2) @[ALU.scala 18:31]
      io.y <= _T_3 @[ALU.scala 18:23]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<1>("h01"), io.fs) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = sub(io.a, io.b) @[ALU.scala 19:31]
        node _T_6 = tail(_T_5, 1) @[ALU.scala 19:31]
        node _T_7 = asSInt(_T_6) @[ALU.scala 19:31]
        io.y <= _T_7 @[ALU.scala 19:23]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<2>("h02"), io.fs) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = add(io.a, asSInt(UInt<2>("h01"))) @[ALU.scala 20:31]
          node _T_10 = tail(_T_9, 1) @[ALU.scala 20:31]
          node _T_11 = asSInt(_T_10) @[ALU.scala 20:31]
          io.y <= _T_11 @[ALU.scala 20:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_12 = eq(UInt<2>("h03"), io.fs) @[Conditional.scala 37:30]
          when _T_12 : @[Conditional.scala 39:67]
            node _T_13 = sub(io.a, asSInt(UInt<2>("h01"))) @[ALU.scala 21:31]
            node _T_14 = tail(_T_13, 1) @[ALU.scala 21:31]
            node _T_15 = asSInt(_T_14) @[ALU.scala 21:31]
            io.y <= _T_15 @[ALU.scala 21:23]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_16 = eq(UInt<3>("h04"), io.fs) @[Conditional.scala 37:30]
            when _T_16 : @[Conditional.scala 39:67]
              node _T_17 = and(io.a, io.b) @[ALU.scala 22:31]
              node _T_18 = asSInt(_T_17) @[ALU.scala 22:31]
              io.y <= _T_18 @[ALU.scala 22:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_19 = eq(UInt<3>("h05"), io.fs) @[Conditional.scala 37:30]
              when _T_19 : @[Conditional.scala 39:67]
                node _T_20 = or(io.a, io.b) @[ALU.scala 23:31]
                node _T_21 = asSInt(_T_20) @[ALU.scala 23:31]
                io.y <= _T_21 @[ALU.scala 23:23]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_22 = eq(UInt<3>("h06"), io.fs) @[Conditional.scala 37:30]
                when _T_22 : @[Conditional.scala 39:67]
                  node _T_23 = xor(io.a, io.b) @[ALU.scala 24:31]
                  node _T_24 = asSInt(_T_23) @[ALU.scala 24:31]
                  io.y <= _T_24 @[ALU.scala 24:23]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_25 = eq(UInt<3>("h07"), io.fs) @[Conditional.scala 37:30]
                  when _T_25 : @[Conditional.scala 39:67]
                    node _T_26 = not(io.a) @[ALU.scala 25:26]
                    node _T_27 = asSInt(_T_26) @[ALU.scala 25:26]
                    io.y <= _T_27 @[ALU.scala 25:23]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_28 = eq(UInt<4>("h08"), io.fs) @[Conditional.scala 37:30]
                    when _T_28 : @[Conditional.scala 39:67]
                      node _T_29 = mul(io.a, io.b) @[ALU.scala 26:31]
                      io.y <= _T_29 @[ALU.scala 26:23]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_30 = eq(UInt<4>("h0a"), io.fs) @[Conditional.scala 37:30]
                      when _T_30 : @[Conditional.scala 39:67]
                        node _T_31 = bits(io.b, 6, 0) @[ALU.scala 28:39]
                        node _T_32 = dshl(io.a, _T_31) @[ALU.scala 28:32]
                        io.y <= _T_32 @[ALU.scala 28:24]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_33 = eq(UInt<4>("h0b"), io.fs) @[Conditional.scala 37:30]
                        when _T_33 : @[Conditional.scala 39:67]
                          node _T_34 = bits(io.b, 6, 0) @[ALU.scala 29:39]
                          node _T_35 = dshr(io.a, _T_34) @[ALU.scala 29:32]
                          io.y <= _T_35 @[ALU.scala 29:24]
                          skip @[Conditional.scala 39:67]
                        else : @[Conditional.scala 39:67]
                          node _T_36 = eq(UInt<4>("h0c"), io.fs) @[Conditional.scala 37:30]
                          when _T_36 : @[Conditional.scala 39:67]
                            node _T_37 = eq(io.a, io.b) @[ALU.scala 30:35]
                            io.flag <= _T_37 @[ALU.scala 30:27]
                            skip @[Conditional.scala 39:67]
                          else : @[Conditional.scala 39:67]
                            node _T_38 = eq(UInt<4>("h0d"), io.fs) @[Conditional.scala 37:30]
                            when _T_38 : @[Conditional.scala 39:67]
                              node _T_39 = geq(io.a, io.b) @[ALU.scala 31:35]
                              io.flag <= _T_39 @[ALU.scala 31:27]
                              skip @[Conditional.scala 39:67]
                            else : @[Conditional.scala 39:67]
                              node _T_40 = eq(UInt<4>("h0e"), io.fs) @[Conditional.scala 37:30]
                              when _T_40 : @[Conditional.scala 39:67]
                                node _T_41 = lt(io.a, io.b) @[ALU.scala 32:35]
                                io.flag <= _T_41 @[ALU.scala 32:27]
                                skip @[Conditional.scala 39:67]
                              else : @[Conditional.scala 39:67]
                                node _T_42 = eq(UInt<4>("h0f"), io.fs) @[Conditional.scala 37:30]
                                when _T_42 : @[Conditional.scala 39:67]
                                  node _T_43 = bits(io.a, 31, 31) @[ALU.scala 33:34]
                                  io.flag <= _T_43 @[ALU.scala 33:27]
                                  skip @[Conditional.scala 39:67]
    
  module Datapath : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip test : UInt<3>, cnt : UInt<8>, OutInst : UInt<32>, InA : SInt<32>, InB : SInt<32>, InImm : SInt<32>, OutEx : SInt<32>, OutMA : SInt<32>, OutDA : UInt<5>}
    
    inst Mem of Memory @[Datapath.scala 18:29]
    Mem.clock <= clock
    Mem.reset <= reset
    Mem.io.rddA <= UInt<8>("h00") @[Datapath.scala 19:21]
    Mem.io.wrdA <= UInt<8>("h00") @[Datapath.scala 20:21]
    Mem.io.wrdData <= asSInt(UInt<32>("h00")) @[Datapath.scala 21:21]
    Mem.io.wrd <= UInt<1>("h00") @[Datapath.scala 22:21]
    Mem.io.testSel <= io.test @[Datapath.scala 23:21]
    inst Regx32 of Register32 @[Datapath.scala 25:29]
    Regx32.clock <= clock
    Regx32.reset <= reset
    inst InstDec of InstDec @[Datapath.scala 27:29]
    InstDec.clock <= clock
    InstDec.reset <= reset
    inst ALU of ALU @[Datapath.scala 29:29]
    ALU.clock <= clock
    ALU.reset <= reset
    reg InstReg : UInt<32>, clock @[Datapath.scala 34:22]
    reg AReg : SInt<32>, clock @[Datapath.scala 36:22]
    reg aAReg : UInt<5>, clock @[Datapath.scala 37:22]
    reg BReg : SInt<32>, clock @[Datapath.scala 38:22]
    reg bAReg : UInt<5>, clock @[Datapath.scala 39:22]
    reg ImmReg : SInt<32>, clock @[Datapath.scala 40:22]
    reg opReg1 : UInt<6>, clock @[Datapath.scala 41:22]
    reg offReg : SInt<10>, clock @[Datapath.scala 42:22]
    reg yReg : SInt<32>, clock @[Datapath.scala 44:22]
    reg resReg : SInt<32>, clock @[Datapath.scala 46:22]
    reg wbReg1 : UInt<5>, clock @[Datapath.scala 48:22]
    reg wbReg2 : UInt<5>, clock @[Datapath.scala 49:22]
    reg wbReg3 : UInt<5>, clock @[Datapath.scala 50:22]
    wire AVal : SInt<32> @[Datapath.scala 53:20]
    wire BVal : SInt<32> @[Datapath.scala 54:20]
    reg pc : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Datapath.scala 58:23]
    node _T = add(pc, UInt<8>("h01")) @[Datapath.scala 59:19]
    node _T_1 = tail(_T, 1) @[Datapath.scala 59:19]
    pc <= _T_1 @[Datapath.scala 59:13]
    Mem.io.rdiA <= pc @[Datapath.scala 61:17]
    InstReg <= Mem.io.rdiData @[Datapath.scala 62:17]
    InstDec.io.Instruction <= InstReg @[Datapath.scala 65:28]
    Regx32.io.AA <= InstDec.io.aA @[Datapath.scala 67:18]
    Regx32.io.BA <= InstDec.io.bA @[Datapath.scala 68:18]
    wbReg1 <= InstDec.io.dA @[Datapath.scala 69:18]
    AReg <= Regx32.io.AOut @[Datapath.scala 70:18]
    aAReg <= InstDec.io.aA @[Datapath.scala 71:18]
    BReg <= Regx32.io.BOut @[Datapath.scala 72:18]
    bAReg <= InstDec.io.bA @[Datapath.scala 73:18]
    ImmReg <= InstDec.io.immidiate @[Datapath.scala 74:18]
    opReg1 <= InstDec.io.opcode @[Datapath.scala 75:18]
    offReg <= InstDec.io.offset @[Datapath.scala 76:18]
    ALU.io.a <= asSInt(UInt<32>("h00")) @[Datapath.scala 82:17]
    ALU.io.b <= asSInt(UInt<32>("h00")) @[Datapath.scala 83:17]
    ALU.io.fs <= UInt<4>("h00") @[Datapath.scala 84:17]
    node _T_2 = eq(aAReg, wbReg2) @[Datapath.scala 87:16]
    when _T_2 : @[Datapath.scala 87:27]
      AVal <= yReg @[Datapath.scala 88:14]
      skip @[Datapath.scala 87:27]
    else : @[Datapath.scala 89:35]
      node _T_3 = eq(aAReg, wbReg3) @[Datapath.scala 89:24]
      when _T_3 : @[Datapath.scala 89:35]
        AVal <= resReg @[Datapath.scala 90:14]
        skip @[Datapath.scala 89:35]
      else : @[Datapath.scala 91:16]
        AVal <= AReg @[Datapath.scala 92:14]
        skip @[Datapath.scala 91:16]
    node _T_4 = eq(bAReg, wbReg2) @[Datapath.scala 96:16]
    when _T_4 : @[Datapath.scala 96:27]
      BVal <= yReg @[Datapath.scala 97:14]
      skip @[Datapath.scala 96:27]
    else : @[Datapath.scala 98:35]
      node _T_5 = eq(bAReg, wbReg3) @[Datapath.scala 98:24]
      when _T_5 : @[Datapath.scala 98:35]
        BVal <= resReg @[Datapath.scala 99:14]
        skip @[Datapath.scala 98:35]
      else : @[Datapath.scala 100:16]
        BVal <= BReg @[Datapath.scala 101:14]
        skip @[Datapath.scala 100:16]
    node _T_6 = bits(opReg1, 5, 4) @[Datapath.scala 105:19]
    node _T_7 = eq(UInt<1>("h00"), _T_6) @[Conditional.scala 37:30]
    when _T_7 : @[Conditional.scala 40:58]
      ALU.io.a <= AVal @[Datapath.scala 108:25]
      ALU.io.b <= BVal @[Datapath.scala 109:25]
      node _T_8 = bits(opReg1, 3, 0) @[Datapath.scala 110:35]
      ALU.io.fs <= _T_8 @[Datapath.scala 110:25]
      yReg <= ALU.io.y @[Datapath.scala 111:25]
      node _T_9 = eq(ALU.io.flag, UInt<1>("h01")) @[Datapath.scala 113:30]
      when _T_9 : @[Datapath.scala 113:41]
        node _T_10 = asUInt(offReg) @[Datapath.scala 114:40]
        node _T_11 = add(pc, _T_10) @[Datapath.scala 114:31]
        node _T_12 = tail(_T_11, 1) @[Datapath.scala 114:31]
        pc <= _T_12 @[Datapath.scala 114:25]
        InstReg <= UInt<32>("h00") @[Datapath.scala 115:25]
        AReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 116:25]
        BReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 117:25]
        ImmReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 118:25]
        opReg1 <= UInt<32>("h00") @[Datapath.scala 119:25]
        offReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 120:25]
        skip @[Datapath.scala 113:41]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_13 = eq(UInt<1>("h01"), _T_6) @[Conditional.scala 37:30]
      when _T_13 : @[Conditional.scala 39:67]
        ALU.io.a <= AVal @[Datapath.scala 125:25]
        ALU.io.b <= ImmReg @[Datapath.scala 126:25]
        node _T_14 = bits(opReg1, 3, 0) @[Datapath.scala 127:35]
        ALU.io.fs <= _T_14 @[Datapath.scala 127:25]
        yReg <= ALU.io.y @[Datapath.scala 128:25]
        node _T_15 = eq(ALU.io.flag, UInt<1>("h01")) @[Datapath.scala 130:30]
        when _T_15 : @[Datapath.scala 130:41]
          node _T_16 = asUInt(offReg) @[Datapath.scala 131:40]
          node _T_17 = add(pc, _T_16) @[Datapath.scala 131:31]
          node _T_18 = tail(_T_17, 1) @[Datapath.scala 131:31]
          pc <= _T_18 @[Datapath.scala 131:25]
          InstReg <= UInt<32>("h00") @[Datapath.scala 132:25]
          AReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 133:25]
          BReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 134:25]
          ImmReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 135:25]
          opReg1 <= UInt<32>("h00") @[Datapath.scala 136:25]
          offReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 137:25]
          skip @[Datapath.scala 130:41]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_19 = eq(UInt<2>("h02"), _T_6) @[Conditional.scala 37:30]
        when _T_19 : @[Conditional.scala 39:67]
          node _T_20 = add(AVal, offReg) @[Datapath.scala 142:32]
          node _T_21 = tail(_T_20, 1) @[Datapath.scala 142:32]
          node _T_22 = asSInt(_T_21) @[Datapath.scala 142:32]
          node _T_23 = bits(opReg1, 3, 3) @[Datapath.scala 144:26]
          node _T_24 = eq(_T_23, UInt<1>("h00")) @[Datapath.scala 144:30]
          when _T_24 : @[Datapath.scala 144:38]
            node _T_25 = bits(opReg1, 2, 2) @[Datapath.scala 146:30]
            node _T_26 = eq(_T_25, UInt<1>("h00")) @[Datapath.scala 146:34]
            when _T_26 : @[Datapath.scala 146:42]
              Mem.io.wrd <= UInt<1>("h00") @[Datapath.scala 147:33]
              node _T_27 = bits(_T_22, 7, 0) @[Datapath.scala 148:43]
              Mem.io.rddA <= _T_27 @[Datapath.scala 148:33]
              yReg <= Mem.io.rddData @[Datapath.scala 149:33]
              skip @[Datapath.scala 146:42]
            skip @[Datapath.scala 144:38]
          else : @[Datapath.scala 153:23]
            Mem.io.wrd <= UInt<1>("h01") @[Datapath.scala 154:29]
            node _T_28 = bits(_T_22, 7, 0) @[Datapath.scala 155:39]
            Mem.io.rddA <= _T_28 @[Datapath.scala 155:29]
            node _T_29 = bits(opReg1, 2, 2) @[Datapath.scala 157:30]
            node _T_30 = eq(_T_29, UInt<1>("h00")) @[Datapath.scala 157:34]
            when _T_30 : @[Datapath.scala 157:42]
              Mem.io.wrdData <= BVal @[Datapath.scala 158:36]
              skip @[Datapath.scala 157:42]
            else : @[Datapath.scala 161:27]
              Mem.io.wrdData <= ImmReg @[Datapath.scala 162:36]
              skip @[Datapath.scala 161:27]
            yReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 164:21]
            skip @[Datapath.scala 153:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_31 = eq(UInt<2>("h03"), _T_6) @[Conditional.scala 37:30]
          when _T_31 : @[Conditional.scala 39:67]
            node _T_32 = bits(opReg1, 3, 3) @[Datapath.scala 169:25]
            node _T_33 = eq(_T_32, UInt<1>("h00")) @[Datapath.scala 169:29]
            when _T_33 : @[Datapath.scala 169:37]
              node _T_34 = add(AVal, offReg) @[Datapath.scala 170:34]
              node _T_35 = tail(_T_34, 1) @[Datapath.scala 170:34]
              node _T_36 = asSInt(_T_35) @[Datapath.scala 170:34]
              node _T_37 = asUInt(_T_36) @[Datapath.scala 170:44]
              pc <= _T_37 @[Datapath.scala 170:25]
              skip @[Datapath.scala 169:37]
            else : @[Datapath.scala 172:23]
              node _T_38 = bits(ImmReg, 7, 0) @[Datapath.scala 173:34]
              pc <= _T_38 @[Datapath.scala 173:25]
              skip @[Datapath.scala 172:23]
            yReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 175:21]
            InstReg <= UInt<32>("h00") @[Datapath.scala 176:21]
            AReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 177:21]
            BReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 178:21]
            ImmReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 179:21]
            opReg1 <= UInt<32>("h00") @[Datapath.scala 180:21]
            offReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 181:21]
            skip @[Conditional.scala 39:67]
    reg opReg2 : UInt, clock @[Datapath.scala 185:26]
    opReg2 <= opReg1 @[Datapath.scala 185:26]
    wbReg2 <= wbReg1 @[Datapath.scala 186:13]
    node _T_39 = bits(opReg2, 5, 4) @[Datapath.scala 191:18]
    node _T_40 = eq(_T_39, UInt<2>("h03")) @[Datapath.scala 191:24]
    when _T_40 : @[Datapath.scala 191:32]
      node _T_41 = bits(opReg2, 3, 3) @[Datapath.scala 192:22]
      node _T_42 = eq(_T_41, UInt<1>("h00")) @[Datapath.scala 192:26]
      when _T_42 : @[Datapath.scala 192:34]
        resReg <= Mem.io.rddData @[Datapath.scala 193:20]
        skip @[Datapath.scala 192:34]
      else : @[Datapath.scala 194:21]
        resReg <= asSInt(UInt<32>("h00")) @[Datapath.scala 195:20]
        skip @[Datapath.scala 194:21]
      skip @[Datapath.scala 191:32]
    else : @[Datapath.scala 197:17]
      resReg <= yReg @[Datapath.scala 198:16]
      skip @[Datapath.scala 197:17]
    wbReg3 <= wbReg2 @[Datapath.scala 201:13]
    Regx32.io.DA <= wbReg3 @[Datapath.scala 204:18]
    node _T_43 = neq(Regx32.io.DA, UInt<1>("h00")) @[Datapath.scala 206:23]
    when _T_43 : @[Datapath.scala 206:31]
      Regx32.io.DataIn <= resReg @[Datapath.scala 207:26]
      skip @[Datapath.scala 206:31]
    else : @[Datapath.scala 208:17]
      Regx32.io.DataIn <= asSInt(UInt<32>("h00")) @[Datapath.scala 209:26]
      skip @[Datapath.scala 208:17]
    io.cnt <= pc @[Datapath.scala 213:16]
    io.OutInst <= InstReg @[Datapath.scala 214:16]
    io.InA <= AReg @[Datapath.scala 215:16]
    io.InB <= BReg @[Datapath.scala 216:16]
    io.InImm <= ImmReg @[Datapath.scala 217:16]
    io.OutEx <= yReg @[Datapath.scala 218:16]
    io.OutMA <= resReg @[Datapath.scala 219:16]
    io.OutDA <= wbReg3 @[Datapath.scala 220:16]
    
